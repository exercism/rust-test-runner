{
  "version": 2,
  "status": "fail",
  "message": null,
  "tests": [
    {
      "name": "Any old year",
      "test_code": "process_leapyear_case(1997, false);",
      "status": "fail",
      "message": "thread 'test_any_old_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Century",
      "test_code": "process_leapyear_case(1700, false);\nprocess_leapyear_case(1800, false);\nprocess_leapyear_case(1900, false);",
      "status": "fail",
      "message": "thread 'test_century' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Early years",
      "test_code": "process_leapyear_case(1, false);\nprocess_leapyear_case(4, true);\nprocess_leapyear_case(100, false);\nprocess_leapyear_case(400, true);\nprocess_leapyear_case(900, false);",
      "status": "fail",
      "message": "thread 'test_early_years' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Exceptional centuries",
      "test_code": "process_leapyear_case(1600, true);\nprocess_leapyear_case(2000, true);\nprocess_leapyear_case(2400, true);",
      "status": "fail",
      "message": "thread 'test_exceptional_centuries' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: false\n right: true\n"
    },
    {
      "name": "Year divisible by 100 but not by 3 is still not a leap year",
      "test_code": "process_leapyear_case(1900, false);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_100_but_not_by_3_is_still_not_a_leap_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Year divisible by 100 not divisible by 400 common year",
      "test_code": "process_leapyear_case(2100, false);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_100_not_divisible_by_400_common_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Year divisible by 2 not divisible by 4 in common year",
      "test_code": "process_leapyear_case(1970, false);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_2_not_divisible_by_4_in_common_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Year divisible by 200 not divisible by 400 common year",
      "test_code": "process_leapyear_case(1800, false);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_200_not_divisible_by_400_common_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Year divisible by 4 and 5 is still a leap year",
      "test_code": "process_leapyear_case(1960, true);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_4_and_5_is_still_a_leap_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: false\n right: true\n"
    },
    {
      "name": "Year divisible by 4 not divisible by 100 leap year",
      "test_code": "process_leapyear_case(1996, true);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_4_not_divisible_by_100_leap_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: false\n right: true\n"
    },
    {
      "name": "Year divisible by 400 but not by 125 is still a leap year",
      "test_code": "process_leapyear_case(2400, true);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_400_but_not_by_125_is_still_a_leap_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: false\n right: true\n"
    },
    {
      "name": "Year divisible by 400 leap year",
      "test_code": "process_leapyear_case(2000, true);",
      "status": "fail",
      "message": "thread 'test_year_divisible_by_400_leap_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: false\n right: true\n"
    },
    {
      "name": "Year not divisible by 4 common year",
      "test_code": "process_leapyear_case(2015, false);",
      "status": "fail",
      "message": "thread 'test_year_not_divisible_by_4_common_year' panicked at tests/leap.rs:2:5:\nassertion `left == right` failed\n  left: true\n right: false\n"
    },
    {
      "name": "Years 1600 to 1699",
      "test_code": "let incorrect_years = (1600..1700)\n    .filter(|&year| leap::is_leap_year(year) != (year % 4 == 0))\n    .collect::<Vec<_>>();\n\nif !incorrect_years.is_empty() {\n    panic!(\"incorrect result for years: {:?}\", incorrect_years);\n}",
      "status": "fail",
      "message": "thread 'test_years_1600_to_1699' panicked at tests/leap.rs:98:9:\nincorrect result for years: [1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699]\n"
    }
  ]
}
